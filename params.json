{"name":"Vue-fire","tagline":"","body":"**WIP** vue-fire\r\n============\r\nSync a $data path of a Vue.js view model with a Firebase reference.\r\n\r\n## Usage\r\nFirst add it as a dependency:\r\n```\r\nnpm install --save vue-fire\r\n```\r\n\r\n```javascript\r\n// Plugin\r\n\r\nvar Vue = require('vue');\r\nvar vueFire = require('vue-fire');\r\n\r\nVue.use(vueFire, { app: 'your-firebase-app' });\r\n\r\n// Mixin\r\n\r\nvar firebaseMixin = require('vue-fire').mixin;\r\n\r\nvar app = new Vue({\r\n\r\n  mixins: [ firebaseMixin ],\r\n\r\n  template: '<ul>' +\r\n              '<li v-repeat=\"people\">{{name}} : {{age}}</li>' +\r\n            '</ul>',\r\n\r\n  firebase: function(root) {\r\n    var peopleRef = root.child('people').orderBy('age').limitToLast(3);\r\n\r\n    return {\r\n      arrays: [ peopleRef ],\r\n      values: [\r\n        'status',\r\n        'name'\r\n      ]\r\n    };\r\n  },\r\n\r\n  ready: function() {\r\n    // this.$firebase has been created, you can attach more stuff to the view model\r\n    var ref = this.$firebase.setValue('user/presence', 'isOnline');\r\n\r\n    ref.on('value:error', function(err) { })\r\n  }\r\n\r\n});\r\n\r\napp.$mount('#app');\r\n```\r\n\r\nThis mixin sets a ```$firebase``` property on the view model, which has the following API:\r\n\r\n## API for vm.$firebase\r\n\r\n### .setValue(firebaseLocation|String, [ keyPath|String ])\r\n  Creates a new keypath in the view model with the ```firebaseLocation``` reference key or ```keyPath```(if specified)\r\n  and listens on the ```'value'``` event to update the view model value as it changes in the ```firebaseLocation```.\r\n\r\n  Ex.\r\n\r\n  ```js\r\n  // Binds https://your-firebase-app.firebaseio.com/user/presence to the 'vm.isOnline' keypath\r\n  vm.$firebase.setValue('user/presence', 'isOnline')\r\n\r\n  // Binds https://your-firebase-app.firebaseio.com/title to the 'vm.title' keypath\r\n  vm.$firebase.setValue('title')\r\n  ```\r\n\r\n  .setValue return a [```FirebaseValue```](#getkeypathstring) instance.\r\n\r\n### .setArray([ firebaseKey|String ], setter|Function)\r\n  Creates an array with the reference key in $data and attaches listeners\r\n  on the Firebase list events(child_added, child_removed, child_moved, child_changed).\r\n\r\n```js\r\n  vm.$firebase.setArray('crazyPeople', function(root) {\r\n    return root.child('people').orderByChild('crazinessFactor').equalTo('100');\r\n  }) // vm.crazyPeople now updates as the data in the given query changes/moves\r\n```\r\n\r\n### .get(keyPath|String)\r\n  Returns a FirebaseValue or FirebaseArray.\r\n\r\n  From the usage example above:\r\n  ```\r\n  vm.$firebase.get('people')\r\n  vm.$firebase.get('status')\r\n  vm.$firebase.get('name')\r\n  ```\r\n\r\n  The returned object is an [Event Emitter](https://github.com/component/emitter) and has the following API:\r\n\r\n#### .on(event|String, callback|Function)\r\n  If its a FirebaseValue instance, you can listen on the ```'value'``` event if you need to get a hold of the raw\r\n  ```snapshot```, or the ```'value:error'``` event which fires when there is an error in the syncing from Firebase.\r\n  \r\n  ```js\r\n  var isOnline = vm.$firebase.get('isOnline')\r\n\r\n  isOnline.on('value', function(snapshot) { })\r\n  isOnline.on('value:error', function(error) { })\r\n  ```\r\n\r\n### .once()\r\n  Same as .on, but triggers only one time.\r\n\r\n#### .off([event|String, callback|Function ])\r\n  Stop listening for an event which you previously subscribed to, or all of them when you don't pass any argument to .off\r\n\r\n#### .ref()\r\n  Returns the raw Firebase reference object.\r\n\r\n### .remove([ removeLocal|Boolean ])\r\n  Removes the Firebase listeners, so the value stored in ```$data``` is no longer updated.\r\n  If ```removeLocal``` is set to ```true```, it completely ```$delete```s the keypath from the view model.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}